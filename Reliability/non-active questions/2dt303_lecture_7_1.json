[
  {
    "Question": "What is the primary focus of fault avoidance in embedded systems?",
    "Answer": "Fault avoidance focuses on preventing faults from occurring in the first place during specification and implementation stages."
  },
  {
    "Question": "Why is specification crucial in embedded system design?",
    "Answer": "Specification serves as a communication tool among engineers, developers, clients, and regulators, storing critical information about the system."
  },
  {
    "Question": "Why are defects in specification considered costly?",
    "Answer": "Defects in specification are the most expensive to repair because they occur early in the development process and often require significant rework."
  },
  {
    "Question": "What are some issues with using natural languages for specifications?",
    "Answer": "Natural languages can introduce ambiguity, imprecision, informality, and issues with dialects, making them unsuitable for formal system specifications."
  },
  {
    "Question": "List common problems that can arise from client-to-designer specifications.",
    "Answer": "Issues include unprioritized requirements, unrealistic expectations, ambiguities, and misunderstandings about feasibility."
  },
  {
    "Question": "What are common reasons for faults in embedded systems?",
    "Answer": "Common reasons include changing requirements, poorly defined system requirements, inaccurate resource estimates, and poor communication."
  },
  {
    "Question": "What is a domain-specific language (DSL)?",
    "Answer": "A DSL is a programming language designed specifically for a particular domain, such as procedural or declarative languages for embedded systems."
  },
  {
    "Question": "Describe a declarative domain-specific language.",
    "Answer": "A declarative language specifies the desired end state without detailing the steps to reach that state, focusing on 'what' rather than 'how'."
  },
  {
    "Question": "Describe a procedural domain-specific language.",
    "Answer": "A procedural language specifies the exact sequence of actions the computer must perform to complete a computation, focusing on 'how' to achieve results."
  },
  {
    "Question": "What is the difference in meaning of '=' in procedural and mathematical notations?",
    "Answer": "In procedural language, '=' signifies assignment, whereas in mathematics, '=' denotes equality in the sense of predicate calculus."
  },
  {
    "Question": "Provide an example of a procedural language specification.",
    "Answer": "An example of procedural language specification: 'Gross salary = basic salary + allowances; CTC = gross salary + benefits'."
  },
  {
    "Question": "Provide an example of a declarative specification.",
    "Answer": "A declarative specification focuses only on the final result, without detailing the procedure, such as describing a system's end state or result."
  },
  {
    "Question": "What is the next topic after fault avoidance in this lecture?",
    "Answer": "The next topic is Fault Elimination."
  }
]
